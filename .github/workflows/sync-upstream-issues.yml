name: Sync Upstream Issues

on:
  schedule:
    # Run daily at 6:00 AM UTC
    - cron: '0 6 * * *'
  workflow_dispatch:
    # Allow manual triggering

jobs:
  sync-issues:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Sync upstream issues
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          UPSTREAM_REPO: 'pinchbv/floor'
          CURRENT_REPO: ${{ github.repository }}
        run: |
          # Install GitHub CLI if not available
          if ! command -v gh &> /dev/null; then
            echo "Installing GitHub CLI..."
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
            sudo apt update
            sudo apt install gh
          fi
          
          # Authenticate with GitHub CLI
          echo "$GITHUB_TOKEN" | gh auth login --with-token
          
          echo "Starting to sync issues from $UPSTREAM_REPO to $CURRENT_REPO"
          
          # Create a temporary file to store existing issue titles for deduplication
          echo "Fetching existing issues in current repository..."
          gh issue list --repo "$CURRENT_REPO" --state open --limit 1000 --json title,number > existing_issues.json
          
          # Create a file to track which issues we've already processed
          touch processed_issues.txt
          
          echo "Fetching open issues from upstream repository..."
          gh issue list --repo "$UPSTREAM_REPO" --state open --limit 100 --json title,body,number,author,createdAt,labels > upstream_issues.json
          
          # Process each upstream issue
          node -e "
          const fs = require('fs');
          const { execSync } = require('child_process');
          
          const existingIssues = JSON.parse(fs.readFileSync('existing_issues.json', 'utf8'));
          const upstreamIssues = JSON.parse(fs.readFileSync('upstream_issues.json', 'utf8'));
          
          // Create a set of existing issue titles for quick lookup
          const existingTitles = new Set(existingIssues.map(issue => issue.title.toLowerCase().trim()));
          
          let syncedCount = 0;
          
          for (const issue of upstreamIssues) {
            const issueTitle = issue.title.toLowerCase().trim();
            
            // Check for duplicates by title
            if (existingTitles.has(issueTitle)) {
              console.log(\`Skipping duplicate issue: \${issue.title}\`);
              continue;
            }
            
            // Prepare the issue body with upstream reference
            const issueBody = \`**Synced from upstream:** https://github.com/\${process.env.UPSTREAM_REPO}/issues/\${issue.number}
          **Original Author:** @\${issue.author.login}
          **Created:** \${issue.createdAt}
          
          ---
          
          \${issue.body || 'No description provided.'}\`;
            
            // Prepare labels
            const labels = issue.labels.map(label => label.name).concat(['upstream-sync']);
            const labelArgs = labels.map(label => \`--label \\\"\${label}\\\"\`).join(' ');
            
            try {
              // Create the issue using GitHub CLI
              const command = \`gh issue create --repo \"\${process.env.CURRENT_REPO}\" --title \"\${issue.title}\" --body \"\${issueBody}\" \${labelArgs}\`;
              console.log(\`Creating issue: \${issue.title}\`);
              execSync(command, { stdio: 'inherit' });
              
              // Add to existing titles set to prevent duplicates in this run
              existingTitles.add(issueTitle);
              syncedCount++;
              
              // Add a small delay to avoid rate limiting
              await new Promise(resolve => setTimeout(resolve, 1000));
            } catch (error) {
              console.error(\`Failed to create issue '\${issue.title}': \${error.message}\`);
            }
          }
          
          console.log(\`Sync completed. \${syncedCount} new issues created.\`);
          "
          
          # Clean up temporary files
          rm -f existing_issues.json upstream_issues.json processed_issues.txt
          
          echo "Issue sync completed successfully!"